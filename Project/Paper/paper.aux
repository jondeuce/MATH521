\relax 
\citation{torrey_bloch_1956}
\newlabel{BTreal}{{1}{1}}
\newlabel{BTcplx}{{2}{1}}
\newlabel{omega}{{4}{2}}
\newlabel{BTvec}{{6}{2}}
\bibstyle{ieeetr}
\bibdata{references}
\bibcite{torrey_bloch_1956}{1}
\bibcite{al-mohy_computing_2011}{2}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces  The top-left figure shows an example voxel geometry. The $3\times 3\times \SI {3}{\milli \meter ^3}$ voxel is populated with an isotropic vascular bed and $L=5$ anisotropic large vessels in the $z$-direction. The total volume occupied by the blood vessels is determined by the blood volume fraction BVF. The relative fraction of blood contained in the isotropic vascular bed is determined by the isotropic relative blood volume fraction iRBVF, and the amount of blood contained in the anisotropic vessels is then $\text  {aRBVF} = 1 - \text  {iRBVF}$. The magnetic field generated by this configuration is computed by the convolution of the susceptibility map with the unit dipole kernel. Example cross-sections of the frequency shift map $\delta \omega $ are shown for $\alpha = 0\degree $ (top right), $45 \degree $ (bottom left), and $90 \degree $ (bottom right). It can be easily observed that near large vessels, the resonance frequency (i.e. the magnetic field) remains locally relatively constant compared to the resonance frequency near small vessels, which changes rapidly over short distances. Note also the increase in strength and range of inhomogeneities around the large anisotropic vessels as $\alpha $ increases, introducing the dependence on the angle $\alpha $ into the simulations.\relax }}{4}}
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:geometry}{{1}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Magnetization propagation algorithm used to simulate the signal $S(\text  {TE})$ for a given set of free parameters $\text  {CA}_{\text  {PEAK}}$, BVF, iBVF, and $L$. All four free parameters are encoded solely in the complex decay rate $\Gamma (\ensuremath  {\mathbf  {x}})$; the rest of the algorithm does not depend on them. The notation $\EuScript  {M}_\nu $ is shorthand for $\EuScript  {M}(\ensuremath  {\mathbf  {x}},\nu \Delta t)$ throughout the algorithm. If the $\EuScript  {O}(\Delta t^3)$ order evolution equation \textup  {\hbox {\mathsurround \z@ \normalfont  (\ignorespaces \G@refundefinedtrue \text  {\normalfont  \bfseries  ??}\GenericWarning  {               }{LaTeX Warning: Reference `EvolSplit_Order3' on page 5 undefined}\unskip \@@italiccorr )}} were used instead, line 3 should be modified to decay for only a half time step $\Delta t/2$, line 4 should perform the Gaussian convolution in-place, and an extra line should be added directly following the convolution which decays for another half time step $\Delta t/2$.\relax }}{5}}
\newlabel{fig:algorithm1}{{1}{5}}
\citation{al-mohy_computing_2011}
\citation{al-mohy_computing_2011}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Comparison between solving the Bloch-Torrey equation exactly using the method of lines in conjunction with Higham's \textit  {expmv} integrator\nobreakspace  {}\cite  {al-mohy_computing_2011}, and solving the Bloch-Torrey equation approximately using the two-step approximate solution as described in Algorithm\nobreakspace  {}1\hbox {}. The signal decay through time calculation shows strong agreement between the two methods, with error values of 0.064\% +/- 0.045\%; the maximum error value of 0.14\% occurs at $\unit  [60]{ms}$.\relax }}{6}}
\newlabel{fig:comparison}{{2}{6}}
